---
import Layout from "../layouts/Layout.astro";
import { EXERCISE_LIST } from "../consts/exercises";

// Basic認証
const authHeader = Astro.request.headers.get("authorization");
const locals = Astro.locals as CustomLocals;
const expectedUsername = locals?.runtime?.env?.ADMIN_USERNAME;
const expectedPassword = locals?.runtime?.env?.ADMIN_PASSWORD;

let isAuthenticated = false;

// local環境では認証をスキップ
const isLocal =
  Astro.request.url.includes("localhost") ||
  Astro.request.url.includes("127.0.0.1");
if (isLocal) {
  isAuthenticated = true;
} else {
  // 本番環境での認証
  if (authHeader) {
    const encoded = authHeader.split(" ")[1];
    if (encoded) {
      const decoded = atob(encoded);
      const [username, password] = decoded.split(":");

      if (username === expectedUsername && password === expectedPassword) {
        isAuthenticated = true;
      }
    }
  }

  // 認証されていない場合は401レスポンスを返す
  if (!isAuthenticated) {
    return new Response("認証が必要です", {
      status: 401,
      headers: {
        "WWW-Authenticate": 'Basic realm="Admin Access"',
      },
    });
  }
}

// フォーム送信の処理
let message = "";
let messageType = "";

if (Astro.request.method === "POST") {
  try {
    const formData = await Astro.request.formData();
    const dataType = formData.get("dataType");
    const date = formData.get("date");

    if (!dataType || !date) {
      message = "データタイプと日付は必須です";
      messageType = "error";
    } else {
      // 直接データベースにアクセス
      const DB = (locals?.runtime?.env as any)?.DB;

      if (!DB) {
        message = "データベース接続エラー";
        messageType = "error";
      } else {
        try {
          // データタイプに応じてデータベースに保存
          switch (dataType) {
            case "exercise":
              // 複数の筋トレ種目を処理
              const exerciseEntries = [];
              let index = 0;

              while (true) {
                const exercise_name = formData.get(
                  `exercise_name_${index}`,
                ) as string;
                const count = parseInt(
                  (formData.get(`count_${index}`) as string) || "0",
                );
                const weight = parseInt(
                  (formData.get(`weight_${index}`) as string) || "0",
                );

                if (!exercise_name) {
                  break; // 種目名がない場合は終了
                }

                exerciseEntries.push({ exercise_name, count, weight });
                index++;
              }

              if (exerciseEntries.length === 0) {
                message = "少なくとも1つの種目を入力してください";
                messageType = "error";
              } else {
                // 各種目をデータベースに保存
                for (const entry of exerciseEntries) {
                  await DB.prepare(
                    `INSERT INTO exercise (date, exercise_name, count, weight, updated_at) VALUES (?, ?, ?, ?, CURRENT_TIMESTAMP)`,
                  )
                    .bind(date, entry.exercise_name, entry.count, entry.weight)
                    .run();
                }
                message = `${exerciseEntries.length}種目の筋トレデータが正常に保存されました！`;
                messageType = "success";
              }
              break;

            case "book":
              const title = formData.get("title") as string;
              const pages_read = parseInt(
                (formData.get("pages_read") as string) || "0",
              );
              const book_url = (formData.get("book_url") as string) || null;
              const comment = (formData.get("comment") as string) || null;
              const source_url = (formData.get("source_url") as string) || null;
              const source_name =
                (formData.get("source_name") as string) || null;

              if (!title) {
                message = "タイトルは必須です";
                messageType = "error";
              } else {
                // スキーマ差異に強い動的INSERT
                const colsRes = await DB.prepare(
                  "PRAGMA table_info(book)",
                ).all();
                const colNames = new Set(
                  (colsRes.results || []).map((r: any) => r.name),
                );

                const columns: string[] = [];
                const values: any[] = [];

                const pushIf = (name: string, value: any) => {
                  if (colNames.has(name)) {
                    columns.push(name);
                    values.push(value);
                  }
                };

                pushIf("date", date);
                pushIf("title", title);
                pushIf("pages_read", pages_read);
                pushIf("book_url", book_url);
                pushIf("comment", comment);
                pushIf("source_url", source_url);
                pushIf("source_name", source_name);

                const placeholders = columns.map(() => "?").join(", ");
                const sql = `INSERT INTO book (${columns.join(", ")}) VALUES (${placeholders})`;
                await DB.prepare(sql)
                  .bind(...values)
                  .run();
                message = "読書データが正常に保存されました！";
                messageType = "success";
              }
              break;

            case "output":
              const type = formData.get("type") as string;
              const chars = parseInt((formData.get("chars") as string) || "0");
              const is_tech = (formData.get("is_tech") as string) === "1";

              if (!type) {
                message = "種類は必須です";
                messageType = "error";
              } else {
                await DB.prepare(
                  `INSERT INTO output (date, type, chars, is_tech, updated_at) VALUES (?, ?, ?, ?, CURRENT_TIMESTAMP)`,
                )
                  .bind(date, type, chars, is_tech ? 1 : 0)
                  .run();
                message = "アウトプットデータが正常に保存されました！";
                messageType = "success";
              }
              break;

            case "sleep":
              const hours = parseFloat(
                (formData.get("hours") as string) || "0",
              );

              await DB.prepare(
                `INSERT INTO sleep (date, hours, updated_at) VALUES (?, ?, CURRENT_TIMESTAMP)`,
              )
                .bind(date, hours)
                .run();
              message = "睡眠データが正常に保存されました！";
              messageType = "success";
              break;

            default:
              message = "無効なデータタイプです";
              messageType = "error";
          }
        } catch (dbError) {
          console.error("データベースエラー:", dbError);
          message = "データベースエラーが発生しました";
          messageType = "error";
        }
      }
    }
  } catch (error) {
    console.error("フォーム送信エラー:", error);
    message = "エラーが発生しました";
    messageType = "error";
  }
}

// 過去に登録した本の情報（タイトルごとに最新のメタ情報を1件）
let previousBooks: Array<{
  title: string;
  book_url?: string | null;
  source_url?: string | null;
  source_name?: string | null;
}> = [];

// 各種目の最大重量データ
let exerciseMaxRecords: {
  [key: string]: { maxWeight: number; maxCount: number };
} = {};

try {
  const DB2 = (locals?.runtime?.env as any)?.DB;
  if (DB2) {
    // 過去の本の情報を取得
    const res = await DB2.prepare(
      `SELECT title,
              MAX(book_url)  AS book_url,
              MAX(source_url) AS source_url,
              MAX(source_name) AS source_name,
              MAX(date) AS last_date
         FROM book
        GROUP BY title
        ORDER BY last_date DESC`,
    ).all();
    previousBooks = res.results || [];

    // 各種目の最大重量データを取得
    const maxResult = await DB2.prepare(
      "SELECT exercise_name, MAX(weight) AS max_weight, MAX(count) AS max_count FROM exercise GROUP BY exercise_name",
    ).all();
    (maxResult.results || []).forEach((row: any) => {
      exerciseMaxRecords[row.exercise_name] = {
        maxWeight: row.max_weight ?? 0,
        maxCount: row.max_count ?? 0,
      };
    });
  }
} catch (e) {
  console.error("データ取得エラー", e);
}
---

<Layout>
  <main
    class="min-h-screen bg-gradient-to-br from-indigo-600 to-purple-600 p-8 px-4 relative overflow-x-hidden"
  >
    <div class="text-center mb-12 relative z-1">
      <h1
        class="text-6xl font-extrabold text-white mb-2 drop-shadow-lg animate-fadeInUp"
      >
        📊 データ追加
      </h1>
      <p
        class="text-xl text-white/90 font-light m-0 animate-fadeInUp animation-delay-200"
      >
        ダッシュボードに表示するデータを追加します
      </p>
    </div>

    {
      message && (
        <div
          class={`max-w-[800px] mx-auto mb-8 p-4 px-6 rounded-xl font-medium text-center relative z-1 animate-fadeInUp ${messageType === "success" ? "bg-green-200/20 border border-green-300/30 text-green-800" : "bg-red-200/20 border border-red-300/30 text-red-800"}`}
        >
          {message}
        </div>
      )
    }

    <form
      method="POST"
      class="max-w-[800px] mx-auto bg-white/95 backdrop-blur-sm rounded-2xl p-8 shadow-2xl relative z-1"
    >
      <div class="mb-6">
        <label class="block text-gray-700 font-bold mb-4">データタイプ *</label>
        <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
          <button
            type="button"
            class="data-type-btn px-6 py-4 border-2 border-gray-300 bg-white rounded-lg text-center font-medium transition-all duration-200 hover:border-indigo-500 hover:bg-indigo-50 focus:ring-2 focus:ring-indigo-500 focus:border-transparent shadow-sm hover:shadow-md"
            data-type="exercise"
          >
            <div class="text-2xl mb-2">💪</div>
            <div class="text-lg font-semibold">筋トレ</div>
          </button>
          <button
            type="button"
            class="data-type-btn px-6 py-4 border-2 border-gray-300 bg-white rounded-lg text-center font-medium transition-all duration-200 hover:border-indigo-500 hover:bg-indigo-50 focus:ring-2 focus:ring-indigo-500 focus:border-transparent shadow-sm hover:shadow-md"
            data-type="book"
          >
            <div class="text-2xl mb-2">📚</div>
            <div class="text-lg font-semibold">読書</div>
          </button>
          <button
            type="button"
            class="data-type-btn px-6 py-4 border-2 border-gray-300 bg-white rounded-lg text-center font-medium transition-all duration-200 hover:border-indigo-500 hover:bg-indigo-50 focus:ring-2 focus:ring-indigo-500 focus:border-transparent shadow-sm hover:shadow-md"
            data-type="output"
          >
            <div class="text-2xl mb-2">✍️</div>
            <div class="text-lg font-semibold">アウトプット</div>
          </button>
        </div>
        <input type="hidden" id="dataType" name="dataType" required />
      </div>

      <div class="mb-6">
        <label for="date" class="block text-gray-700 font-bold mb-2"
          >日付 *</label
        >
        <input
          type="date"
          id="date"
          name="date"
          required
          class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition-all duration-200"
          value={new Date().toISOString().split("T")[0]}
        />
      </div>

      <!-- 筋トレフォーム -->
      <div id="exercise-fields" class="data-fields hidden">
        <div class="flex justify-between items-center mb-6">
          <h3 class="text-2xl font-bold text-gray-800">💪 筋トレ種目</h3>
          <div class="flex gap-3">
            <button
              type="button"
              id="upper-body-template"
              class="px-4 py-2 bg-blue-500 text-white font-medium rounded-lg shadow-md hover:bg-blue-600 transition-colors duration-200 text-sm"
              >🏋️ 上半身定型</button
            >
            <button
              type="button"
              id="lower-body-template"
              class="px-4 py-2 bg-green-500 text-white font-medium rounded-lg shadow-md hover:bg-green-600 transition-colors duration-200 text-sm"
              >🦵 下半身定型</button
            >
            <button
              type="button"
              id="add-exercise"
              class="px-6 py-3 bg-indigo-500 text-white font-bold rounded-lg shadow-md hover:bg-indigo-600 transition-colors duration-200"
              >+ 種目を追加</button
            >
          </div>
        </div>
        <div id="exercise-list">
          <div
            class="exercise-item bg-gradient-to-br from-white/95 to-slate-50/95 border border-indigo-200/15 rounded-2xl p-6 mb-6 relative transition-all duration-300 ease-out shadow-lg backdrop-blur-sm"
            data-index="0"
          >
            <div
              class="flex justify-between items-center mb-5 pb-3 border-b-2 border-indigo-200/10"
            >
              <span
                class="font-bold text-indigo-600 text-base bg-gradient-to-r from-indigo-600 to-purple-600 bg-clip-text text-transparent drop-shadow-sm"
                >種目 1</span
              >
              <button
                type="button"
                class="bg-gradient-to-br from-red-100 to-red-200 text-red-600 border border-red-200 rounded-lg w-7 h-7 flex items-center justify-center cursor-pointer text-lg font-bold transition-all duration-300 ease-out shadow-md hover:shadow-lg"
                onclick="removeExercise(this)">×</button
              >
            </div>
            <div class="mb-6">
              <label class="block text-gray-700 font-bold mb-2">種目 *</label>
              <select
                name="exercise_name_0"
                class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition-all duration-200"
                required
              >
                <option value="">種目を選択してください</option>
                {
                  EXERCISE_LIST.map((exercise) => (
                    <option value={exercise.name}>{exercise.name}</option>
                  ))
                }
              </select>
            </div>
            <div class="grid grid-cols-2 gap-4">
              <div class="mb-6">
                <label class="block text-gray-700 font-bold mb-2">回数</label>
                <input
                  type="number"
                  name="count_0"
                  min="0"
                  class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition-all duration-200"
                  placeholder="回数"
                />
              </div>
              <div class="mb-6">
                <label class="block text-gray-700 font-bold mb-2"
                  >重量(kg)</label
                >
                <input
                  type="number"
                  name="weight_0"
                  min="0"
                  step="0.5"
                  class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition-all duration-200"
                  placeholder="重量"
                />
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- 読書フォーム -->
      <div id="book-fields" class="data-fields hidden">
        <div class="mb-6">
          <label for="title" class="block text-gray-700 font-bold mb-2"
            >タイトル *</label
          >
          <input
            type="text"
            id="title"
            name="title"
            class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition-all duration-200"
            placeholder="本のタイトルを入力してください"
          />
        </div>
        {
          previousBooks.length > 0 && (
            <div class="mb-4">
              <label class="block text-gray-700 font-bold mb-2">
                過去の本から選ぶ
              </label>
              <div class="flex gap-2 items-center">
                <select
                  id="previous_book"
                  class="flex-1 px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition-all duration-200"
                >
                  <option value="">選択してください</option>
                  {previousBooks.map((b) => (
                    <option
                      value={b.title}
                      data-book_url={b.book_url || ""}
                      data-source_url={b.source_url || ""}
                      data-source_name={b.source_name || ""}
                    >
                      {b.title}
                    </option>
                  ))}
                </select>
                <button
                  type="button"
                  id="apply_prev_book"
                  class="px-4 py-3 bg-indigo-500 text-white font-bold rounded-lg shadow-md hover:bg-indigo-600 transition-colors duration-200"
                >
                  反映
                </button>
              </div>
              <p class="text-xs text-gray-500 mt-1 m-0">
                タイトル・画像URL・出典情報を自動入力します
              </p>
            </div>
          )
        }
        <div class="mb-6">
          <label for="book_url" class="block text-gray-700 font-bold mb-2"
            >画像URL</label
          >
          <input
            type="url"
            id="book_url"
            name="book_url"
            class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition-all duration-200"
            placeholder="https://（画像ファイルのURL）"
          />
        </div>
        <div class="mb-6 grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label for="source_url" class="block text-gray-700 font-bold mb-2"
              >引用URL（公式ページ）</label
            >
            <input
              type="url"
              id="source_url"
              name="source_url"
              class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition-all duration-200"
              placeholder="https://（公式サイトの該当ページ）"
            />
          </div>
          <div>
            <label for="source_name" class="block text-gray-700 font-bold mb-2"
              >引用サイト名</label
            >
            <input
              type="text"
              id="source_name"
              name="source_name"
              maxlength="60"
              class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition-all duration-200"
              placeholder="例）公式サイト、出版社サイトなど"
            />
          </div>
        </div>
        <div class="mb-6">
          <label for="pages_read" class="block text-gray-700 font-bold mb-2"
            >読んだページ数</label
          >
          <input
            type="number"
            id="pages_read"
            name="pages_read"
            min="0"
            class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition-all duration-200"
            placeholder="ページ数"
          />
        </div>
        <div class="mb-6">
          <label for="comment" class="block text-gray-700 font-bold mb-2"
            >感想（一行）</label
          >
          <input
            type="text"
            id="comment"
            name="comment"
            maxlength="120"
            class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition-all duration-200"
            placeholder="印象に残ったことなどを一言"
          />
        </div>
      </div>

      <!-- アウトプットフォーム -->
      <div id="output-fields" class="data-fields hidden">
        <div class="mb-6">
          <label for="type" class="block text-gray-700 font-bold mb-2"
            >種類 *</label
          >
          <input
            type="text"
            id="type"
            name="type"
            class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition-all duration-200"
            placeholder="ブログ、記事、コードなど"
          />
        </div>
        <div class="mb-6">
          <label for="chars" class="block text-gray-700 font-bold mb-2"
            >文字数</label
          >
          <input
            type="number"
            id="chars"
            name="chars"
            min="0"
            class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition-all duration-200"
            placeholder="文字数"
          />
        </div>
        <div class="mb-6">
          <label class="block text-gray-700 font-bold mb-2"
            >技術系コンテンツ</label
          >
          <div class="flex items-center">
            <label class="flex items-center cursor-pointer">
              <input
                type="checkbox"
                name="is_tech"
                value="1"
                class="w-4 h-4 text-indigo-600 border-gray-300 rounded focus:ring-indigo-500"
              />
              <span class="ml-2 text-gray-700">技術系コンテンツ</span>
            </label>
          </div>
        </div>
      </div>

      <div class="flex gap-4 justify-center">
        <button
          type="submit"
          class="px-8 py-4 bg-indigo-500 text-white font-bold rounded-lg shadow-lg hover:bg-indigo-600 transition-colors duration-200"
        >
          📤 データを保存
        </button>
        <a
          href="/dashboard"
          class="px-8 py-4 bg-gray-500 text-white font-bold rounded-lg shadow-lg hover:bg-gray-600 transition-colors duration-200 no-underline"
        >
          ❌ キャンセル
        </a>
      </div>
    </form>
  </main>
</Layout>

<script define:vars={{ exerciseMaxRecords }}>
  // データタイプの選択に応じてフォームフィールドを表示/非表示
  document.addEventListener("DOMContentLoaded", function () {
    const dataTypeInput = document.getElementById("dataType");
    const dataTypeButtons = document.querySelectorAll(".data-type-btn");
    const dataFields = document.querySelectorAll(".data-fields");

    function setDisabledForChildren(container, disabled) {
      const elements = container.querySelectorAll(
        "input, select, textarea, button",
      );
      elements.forEach((el) => {
        el.disabled = disabled;
        if (disabled) {
          el.required = false;
        }
      });
    }

    function updateVisibleFields(selectedType) {
      dataFields.forEach((field) => {
        const isTarget = field.id === `${selectedType}-fields`;
        if (isTarget) {
          field.classList.remove("hidden");
          setDisabledForChildren(field, false);
          // 必須制御: exerciseの種目は可視時のみ必須
          const exerciseName = field.querySelector(
            'select[name="exercise_name_0"]',
          );
          if (exerciseName) exerciseName.required = true;
        } else {
          field.classList.add("hidden");
          setDisabledForChildren(field, true);
        }
      });
    }

    function selectDataType(type) {
      // ボタンのスタイルを更新
      dataTypeButtons.forEach((btn) => {
        if (btn.dataset.type === type) {
          btn.classList.remove("border-gray-300", "bg-white");
          btn.classList.add("border-indigo-500", "bg-indigo-100");
        } else {
          btn.classList.remove("border-indigo-500", "bg-indigo-100");
          btn.classList.add("border-gray-300", "bg-white");
        }
      });

      // 隠しフィールドに値を設定
      if (dataTypeInput) {
        dataTypeInput.value = type;
      }

      // フォームフィールドを更新
      updateVisibleFields(type);
    }

    // ボタンクリックイベント
    dataTypeButtons.forEach((btn) => {
      btn.addEventListener("click", function () {
        const type = this.dataset.type;
        if (type) {
          selectDataType(type);
        }
      });
    });

    // 初期状態では何も選択されていない
    updateVisibleFields("");

    // 筋トレ種目の追加
    let exerciseIndex = 1;
    const addExerciseBtn = document.getElementById("add-exercise");
    const exerciseList = document.getElementById("exercise-list");

    if (addExerciseBtn && exerciseList) {
      addExerciseBtn.addEventListener("click", function () {
        const exerciseItem = document.createElement("div");
        exerciseItem.className = "exercise-item";
        exerciseItem.setAttribute("data-index", exerciseIndex.toString());
        exerciseItem.className =
          "exercise-item bg-gradient-to-br from-white/95 to-slate-50/95 border border-indigo-200/15 rounded-2xl p-6 mb-6 relative transition-all duration-300 ease-out shadow-lg backdrop-blur-sm";

        exerciseItem.innerHTML = `
          <div class="flex justify-between items-center mb-5 pb-3 border-b-2 border-indigo-200/10">
            <span class="font-bold text-indigo-600 text-base bg-gradient-to-r from-indigo-600 to-purple-600 bg-clip-text text-transparent drop-shadow-sm">種目 ${exerciseIndex + 1}</span>
            <button type="button" class="bg-gradient-to-br from-red-100 to-red-200 text-red-600 border border-red-200 rounded-lg w-7 h-7 flex items-center justify-center cursor-pointer text-lg font-bold transition-all duration-300 ease-out shadow-md hover:shadow-lg" onclick="removeExercise(this)">×</button>
          </div>
          <div class="mb-6">
            <label class="block text-gray-700 font-bold mb-2">種目 *</label>
            <select name="exercise_name_${exerciseIndex}" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition-all duration-200" required>
              <option value="">種目を選択してください</option>
              ${(() => {
                const select = document.querySelector(
                  'select[name="exercise_name_0"]',
                );
                if (!select || !select.options) return "";
                return Array.from(select.options)
                  .map(
                    (option) =>
                      `<option value="${option.value}">${option.text}</option>`,
                  )
                  .join("");
              })()}
            </select>
          </div>
          <div class="grid grid-cols-2 gap-4">
            <div class="mb-6">
              <label class="block text-gray-700 font-bold mb-2">回数</label>
              <input
                type="number"
                name="count_${exerciseIndex}"
                min="0"
                class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition-all duration-200"
                placeholder="回数"
              />
            </div>
            <div class="mb-6">
              <label class="block text-gray-700 font-bold mb-2">重量(kg)</label>
              <input
                type="number"
                name="weight_${exerciseIndex}"
                min="0"
                step="0.5"
                class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition-all duration-200"
                placeholder="重量"
              />
            </div>
          </div>
        `;

        exerciseList.appendChild(exerciseItem);
        exerciseIndex++;
      });
    }

    // 筋トレ種目の削除
    window.removeExercise = function (button) {
      const exerciseItem = button.closest(".exercise-item");
      if (exerciseItem) {
        exerciseItem.remove();
      }

      // 種目番号を再計算
      const exerciseItems = document.querySelectorAll(".exercise-item");
      exerciseItems.forEach((item, index) => {
        const numberSpan = item.querySelector(".exercise-number");
        if (numberSpan) {
          numberSpan.textContent = `種目 ${index + 1}`;
        }
        item.setAttribute("data-index", index.toString());

        // name属性も更新
        const select = item.querySelector("select");
        const countInput = item.querySelector('input[name^="count_"]');
        const weightInput = item.querySelector('input[name^="weight_"]');

        if (select) select.name = `exercise_name_${index}`;
        if (countInput) countInput.name = `count_${index}`;
        if (weightInput) weightInput.name = `weight_${index}`;
      });

      exerciseIndex = exerciseItems.length;
    };

    // 定型トレーニングの自動入力
    const upperBodyTemplateBtn = document.getElementById("upper-body-template");
    const lowerBodyTemplateBtn = document.getElementById("lower-body-template");

    // 上半身定型トレーニング
    if (upperBodyTemplateBtn) {
      upperBodyTemplateBtn.addEventListener("click", function () {
        // 既存の種目をクリア
        const exerciseList = document.getElementById("exercise-list");
        if (exerciseList) {
          exerciseList.innerHTML = "";
        }
        exerciseIndex = 0;

        // 上半身種目を追加
        const upperBodyExercises = [
          { name: "チェストプレス", count: 30, weight: 0 },
          { name: "ペックフライ", count: 30, weight: 0 },
          { name: "チンニング", count: 30, weight: 0 },
          { name: "ケーブルローイング", count: 30, weight: 0 },
        ];

        upperBodyExercises.forEach((exercise, index) => {
          const maxWeight = exerciseMaxRecords[exercise.name]?.maxWeight || 0;
          addExerciseItem(exercise.name, exercise.count, maxWeight, index);
        });
      });
    }

    // 下半身定型トレーニング
    if (lowerBodyTemplateBtn) {
      lowerBodyTemplateBtn.addEventListener("click", function () {
        // 既存の種目をクリア
        const exerciseList = document.getElementById("exercise-list");
        if (exerciseList) {
          exerciseList.innerHTML = "";
        }
        exerciseIndex = 0;

        // 下半身種目を追加
        const lowerBodyExercises = [
          { name: "レッグプレス", count: 15, weight: 0 },
          { name: "アダクター", count: 12, weight: 0 },
          { name: "アブダクター", count: 12, weight: 0 },
        ];

        lowerBodyExercises.forEach((exercise, index) => {
          const maxWeight = exerciseMaxRecords[exercise.name]?.maxWeight || 0;
          addExerciseItem(exercise.name, exercise.count, maxWeight, index);
        });
      });
    }

    // 種目アイテムを追加する共通関数
    function addExerciseItem(exerciseName, count, weight, index) {
      const exerciseList = document.getElementById("exercise-list");
      if (!exerciseList) return;

      const exerciseItem = document.createElement("div");
      exerciseItem.className =
        "exercise-item bg-gradient-to-br from-white/95 to-slate-50/95 border border-indigo-200/15 rounded-2xl p-6 mb-6 relative transition-all duration-300 ease-out shadow-lg backdrop-blur-sm";
      exerciseItem.setAttribute("data-index", index.toString());

      exerciseItem.innerHTML = `
        <div class="flex justify-between items-center mb-5 pb-3 border-b-2 border-indigo-200/10">
          <span class="font-bold text-indigo-600 text-base bg-gradient-to-r from-indigo-600 to-purple-600 bg-clip-text text-transparent drop-shadow-sm">種目 ${index + 1}</span>
          <button type="button" class="bg-gradient-to-br from-red-100 to-red-200 text-red-600 border border-red-200 rounded-lg w-7 h-7 flex items-center justify-center cursor-pointer text-lg font-bold transition-all duration-300 ease-out shadow-md hover:shadow-lg" onclick="removeExercise(this)">×</button>
        </div>
        <div class="mb-6">
          <label class="block text-gray-700 font-bold mb-2">種目 *</label>
          <select name="exercise_name_${index}" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition-all duration-200" required>
            <option value="">種目を選択してください</option>
            <option value="ベンチプレス" ${exerciseName === "ベンチプレス" ? "selected" : ""}>ベンチプレス</option>
            <option value="チェストプレス" ${exerciseName === "チェストプレス" ? "selected" : ""}>チェストプレス</option>
            <option value="ペックフライ" ${exerciseName === "ペックフライ" ? "selected" : ""}>ペックフライ</option>
            <option value="ショルダープレス" ${exerciseName === "ショルダープレス" ? "selected" : ""}>ショルダープレス</option>
            <option value="リアデルト" ${exerciseName === "リアデルト" ? "selected" : ""}>リアデルト</option>
            <option value="チンニング" ${exerciseName === "チンニング" ? "selected" : ""}>チンニング</option>
            <option value="ラットプル" ${exerciseName === "ラットプル" ? "selected" : ""}>ラットプル</option>
            <option value="ケーブルローイング" ${exerciseName === "ケーブルローイング" ? "selected" : ""}>ケーブルローイング</option>
            <option value="スクワット" ${exerciseName === "スクワット" ? "selected" : ""}>スクワット</option>
            <option value="レッグプレス" ${exerciseName === "レッグプレス" ? "selected" : ""}>レッグプレス</option>
            <option value="レッグカール" ${exerciseName === "レッグカール" ? "selected" : ""}>レッグカール</option>
            <option value="レッグエクステンション" ${exerciseName === "レッグエクステンション" ? "selected" : ""}>レッグエクステンション</option>
            <option value="アダクター" ${exerciseName === "アダクター" ? "selected" : ""}>アダクター</option>
            <option value="アブダクター" ${exerciseName === "アブダクター" ? "selected" : ""}>アブダクター</option>
            <option value="ダンベルカール" ${exerciseName === "ダンベルカール" ? "selected" : ""}>ダンベルカール</option>
            <option value="デッドリフト" ${exerciseName === "デッドリフト" ? "selected" : ""}>デッドリフト</option>
            <option value="ネックエクステンション" ${exerciseName === "ネックエクステンション" ? "selected" : ""}>ネックエクステンション</option>
            <option value="トルソーローテーション" ${exerciseName === "トルソーローテーション" ? "selected" : ""}>トルソーローテーション</option>
            <option value="アブドミナルクランチ" ${exerciseName === "アブドミナルクランチ" ? "selected" : ""}>アブドミナルクランチ</option>
            <option value="パワーミル" ${exerciseName === "パワーミル" ? "selected" : ""}>パワーミル</option>
            <option value="トレッドミル" ${exerciseName === "トレッドミル" ? "selected" : ""}>トレッドミル</option>
          </select>
        </div>
        <div class="grid grid-cols-2 gap-4">
          <div class="mb-6">
            <label class="block text-gray-700 font-bold mb-2">回数</label>
            <input
              type="number"
              name="count_${index}"
              min="0"
              value="${count}"
              class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition-all duration-200"
              placeholder="回数"
            />
          </div>
          <div class="mb-6">
            <label class="block text-gray-700 font-bold mb-2">重量(kg)</label>
            <input
              type="number"
              name="weight_${index}"
              min="0"
              step="0.5"
              value="${weight}"
              class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition-all duration-200"
              placeholder="重量"
            />
          </div>
        </div>
      `;

      exerciseList.appendChild(exerciseItem);
      exerciseIndex = index + 1;
    }

    // 過去の本を反映
    const prevSelect = document.getElementById("previous_book");
    const applyPrevBtn = document.getElementById("apply_prev_book");
    const titleInput = document.getElementById("title");
    const bookUrlInput = document.getElementById("book_url");
    const sourceUrlInput = document.getElementById("source_url");
    const sourceNameInput = document.getElementById("source_name");

    function applyPreviousBook() {
      if (!prevSelect) return;
      const opt = prevSelect.selectedOptions[0];
      if (!opt || !opt.value) return;
      const title = opt.value;
      const book_url = opt.getAttribute("data-book_url") || "";
      const source_url = opt.getAttribute("data-source_url") || "";
      const source_name = opt.getAttribute("data-source_name") || "";
      if (titleInput) titleInput.value = title;
      if (bookUrlInput) bookUrlInput.value = book_url;
      if (sourceUrlInput) sourceUrlInput.value = source_url;
      if (sourceNameInput) sourceNameInput.value = source_name;
    }

    applyPrevBtn?.addEventListener("click", applyPreviousBook);
    prevSelect?.addEventListener("change", applyPreviousBook);
  });
</script>
