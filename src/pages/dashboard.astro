---
import Layout from "../layouts/Layout.astro";
import { EXERCISE_LIST, getExerciseIcon } from "../consts/exercises";
import Heatmap from "../components/Heatmap.astro";
import ExerciseLog from "../components/ExerciseLog.astro";
import ActivitySummary from "../components/ActivitySummary.astro";
import ActivityCharts from "../components/ActivityCharts.astro";
import BookLog from "../components/BookLog.astro";
import OutputLog from "../components/OutputLog.astro";

// Áõ¥Êé•„Éá„Éº„Çø„Éô„Éº„Çπ„Åã„Çâ„Éá„Éº„Çø„ÇíÂèñÂæó
const locals = Astro.locals;
const DB = locals?.runtime?.env?.DB;

let exerciseData = [];
let bookData = [];
let outputData = [];

if (DB) {
  try {
    // Á≠ã„Éà„É¨„Éá„Éº„Çø
    const exerciseResult = await DB.prepare(
      "SELECT * FROM exercise ORDER BY date DESC LIMIT 50"
    ).all();
    exerciseData = exerciseResult.results || [];
    console.log("Á≠ã„Éà„É¨„Éá„Éº„Çø:", exerciseData.length, "‰ª∂");

    // Ë™≠Êõ∏„Éá„Éº„Çø
    const bookResult = await DB.prepare(
      "SELECT * FROM book ORDER BY date DESC LIMIT 50"
    ).all();
    bookData = bookResult.results || [];
    console.log("Ë™≠Êõ∏„Éá„Éº„Çø:", bookData.length, "‰ª∂");

    // „Ç¢„Ç¶„Éà„Éó„ÉÉ„Éà„Éá„Éº„Çø
    const outputResult = await DB.prepare(
      "SELECT * FROM output ORDER BY date DESC LIMIT 50"
    ).all();
    outputData = outputResult.results || [];
    console.log("„Ç¢„Ç¶„Éà„Éó„ÉÉ„Éà„Éá„Éº„Çø:", outputData.length, "‰ª∂");
  } catch (error) {
    console.error("„Éá„Éº„Çø„Éô„Éº„Çπ„Ç®„É©„Éº:", error);
  }
} else {
  console.log("„Éá„Éº„Çø„Éô„Éº„ÇπÊé•Á∂ö„Ç®„É©„Éº: DB„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì");
}

// Á≠ã„Éà„É¨Áµ±Ë®à„ÅÆË®àÁÆó
const exerciseStats = {};
const exerciseMaxRecords = {};
exerciseData.forEach((item) => {
  const name = (item as any).exercise_name;
  if (!exerciseStats[name]) {
    exerciseStats[name] = {
      name,
      totalCount: 0,
      totalWeight: 0,
      sessions: 0,
      lastDate: null,
    };
  }
  exerciseStats[name].totalCount += (item as any).count || 0;
  exerciseStats[name].totalWeight += (item as any).weight || 0;
  exerciseStats[name].sessions += 1;

  // ÊúÄÂ§ßË®òÈå≤„ÅÆÊõ¥Êñ∞
  if (!exerciseMaxRecords[name]) {
    exerciseMaxRecords[name] = {
      maxWeight: 0,
      maxCount: 0,
    };
  }
  if (((item as any).weight || 0) > exerciseMaxRecords[name].maxWeight) {
    exerciseMaxRecords[name].maxWeight = (item as any).weight || 0;
  }
  if (((item as any).count || 0) > exerciseMaxRecords[name].maxCount) {
    exerciseMaxRecords[name].maxCount = (item as any).count || 0;
  }

  // ÊúÄÊñ∞Êó•‰ªò„ÅÆÊõ¥Êñ∞
  if (
    !exerciseStats[name].lastDate ||
    (item as any).date > exerciseStats[name].lastDate
  ) {
    exerciseStats[name].lastDate = (item as any).date;
  }
});

const exerciseStatsArray = Object.values(exerciseStats).sort(
  (a, b) => ((b as any).sessions || 0) - ((a as any).sessions || 0)
);

// Ë™≠Êõ∏Áµ±Ë®à„ÅÆË®àÁÆó
const bookStats = {};
bookData.forEach((item) => {
  const title = (item as any).title;
  if (!bookStats[title]) {
    bookStats[title] = {
      title,
      totalPages: 0,
      sessions: 0,
      lastDate: null,
    };
  }
  bookStats[title].totalPages += (item as any).pages_read || 0;
  bookStats[title].sessions += 1;

  // ÊúÄÊñ∞Êó•‰ªò„ÅÆÊõ¥Êñ∞
  if (
    !bookStats[title].lastDate ||
    (item as any).date > bookStats[title].lastDate
  ) {
    bookStats[title].lastDate = (item as any).date;
  }
});

const bookStatsArray = Object.values(bookStats).sort(
  (a, b) => ((b as any).sessions || 0) - ((a as any).sessions || 0)
);

// „Ç¢„Ç¶„Éà„Éó„ÉÉ„ÉàÁµ±Ë®à„ÅÆË®àÁÆó
const outputStats = {};
outputData.forEach((item) => {
  const type = (item as any).type;
  if (!outputStats[type]) {
    outputStats[type] = {
      type,
      totalChars: 0,
      sessions: 0,
      techCount: 0,
      lastDate: null,
    };
  }
  outputStats[type].totalChars += (item as any).chars || 0;
  outputStats[type].sessions += 1;
  if ((item as any).is_tech) {
    outputStats[type].techCount += 1;
  }

  // ÊúÄÊñ∞Êó•‰ªò„ÅÆÊõ¥Êñ∞
  if (
    !outputStats[type].lastDate ||
    (item as any).date > outputStats[type].lastDate
  ) {
    outputStats[type].lastDate = (item as any).date;
  }
});

const outputStatsArray = Object.values(outputStats).sort(
  (a, b) => ((b as any).sessions || 0) - ((a as any).sessions || 0)
);

// Á∂ôÁ∂öÊó•Êï∞„ÅÆË®àÁÆóÔºàÊúÄÊñ∞„ÅÆÊó•‰ªò„Åã„ÇâÈÄ£Á∂ö„ÅßË®òÈå≤„Åå„ÅÇ„ÇãÊó•Êï∞„ÇíË®àÁÆóÔºâ
function calculateStreak(data, dateField) {
  if (data.length === 0) return 0;

  const sortedData = data.sort(
    (a, b) =>
      new Date((b as any)[dateField] || 0) -
      new Date((a as any)[dateField] || 0)
  );
  const latestDate = new Date((sortedData[0] as any)[dateField] || 0);
  let currentDate = new Date(latestDate);
  let streak = 0;

  for (let i = 0; i < 365; i++) {
    // ÊúÄÂ§ß1Âπ¥ÂàÜ„ÉÅ„Çß„ÉÉ„ÇØ
    const dateStr = currentDate.toISOString().split("T")[0];
    const hasRecord = data.some((item) => (item as any)[dateField] === dateStr);

    if (hasRecord) {
      streak++;
      currentDate.setDate((currentDate.getDate() || 0) - 1);
    } else {
      break;
    }
  }

  return streak;
}

const exerciseStreak = calculateStreak(exerciseData, "date") || 0;
const bookStreak = calculateStreak(bookData, "date") || 0;
const outputStreak = calculateStreak(outputData, "date") || 0;
---

<Layout>
  <main class="dashboard-container">
    <div class="dashboard-header">
      <h1 class="dashboard-title">üìä „É©„Ç§„Éï„É≠„Ç∞„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ</h1>
      <p class="dashboard-subtitle">„ÅÇ„Å™„Åü„ÅÆÊó•„ÄÖ„ÅÆÊ¥ªÂãï„ÇíÂèØË¶ñÂåñ</p>
    </div>

    <div class="main-content">
      <ActivitySummary
        exerciseData={exerciseData}
        bookData={bookData}
        outputData={outputData}
        exerciseMaxRecords={exerciseMaxRecords}
        bookStats={bookStats}
        outputStats={outputStats}
      />

      <!-- Âè≥‰∏ä: „Ç∞„É©„Éï -->
      <ActivityCharts exerciseData={exerciseData} bookData={bookData} />
    </div>

    <!-- ‰∏≠Â§Æ: „Ç´„É¨„É≥„ÉÄ„Éº -->
    <section class="calendar-section-main">
      <h2 class="calendar-title">üìÖ Ê¥ªÂãï„Ç´„É¨„É≥„ÉÄ„Éº</h2>
      <div class="calendar-card">
        <Heatmap
          exerciseData={exerciseData}
          bookData={bookData}
          outputData={outputData}
        />
      </div>
    </section>
  </main>

  <!-- Ë©≥Á¥∞„É≠„Ç∞„Çª„ÇØ„Ç∑„Éß„É≥ -->
  <section class="logs-section">
    <h2 class="logs-title">üìã Ë©≥Á¥∞„É≠„Ç∞</h2>
    <div class="logs-grid">
      <!-- Á≠ã„Éà„É¨„É≠„Ç∞ -->
      <ExerciseLog exerciseData={exerciseData} />

      <!-- Ë™≠Êõ∏„É≠„Ç∞ -->
      <BookLog bookData={bookData} />

      <!-- „Ç¢„Ç¶„Éà„Éó„ÉÉ„Éà„É≠„Ç∞ -->
      <OutputLog outputData={outputData} />
    </div>
  </section>
</Layout>

<style>
  .dashboard-container {
    min-height: 100vh;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    padding: 1rem;
    position: relative;
    overflow-x: hidden;
    width: 100%;
    box-sizing: border-box;
  }

  .dashboard-container::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grain" width="100" height="100" patternUnits="userSpaceOnUse"><circle cx="25" cy="25" r="1" fill="white" opacity="0.1"/><circle cx="75" cy="75" r="1" fill="white" opacity="0.1"/><circle cx="50" cy="10" r="0.5" fill="white" opacity="0.1"/><circle cx="10" cy="60" r="0.5" fill="white" opacity="0.1"/><circle cx="90" cy="40" r="0.5" fill="white" opacity="0.1"/></pattern></defs><rect width="100" height="100" fill="url(%23grain)"/></svg>');
    pointer-events: none;
  }

  .dashboard-header {
    text-align: center;
    margin-bottom: 1.5rem;
    position: relative;
    z-index: 1;
    width: 100%;
    box-sizing: border-box;
  }

  .dashboard-title {
    font-size: 2.5rem;
    font-weight: 800;
    color: white;
    margin-bottom: 0.25rem;
    text-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
    animation: fadeInUp 0.8s ease-out;
  }

  .dashboard-subtitle {
    font-size: 1rem;
    color: rgba(255, 255, 255, 0.9);
    font-weight: 300;
    margin: 0;
    animation: fadeInUp 0.8s ease-out 0.2s both;
  }

  /* „É°„Ç§„É≥„Ç≥„É≥„ÉÜ„É≥„ÉÑ„Ç®„É™„Ç¢ */
  .main-content {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 1rem;
    max-width: 1400px;
    width: 100%;
    margin: 0 auto 1rem auto;
    position: relative;
    z-index: 1;
    animation: fadeInUp 0.8s ease-out 0.3s both;
    min-height: 60vh;
  }

  /* „É≠„Ç∞„Çª„ÇØ„Ç∑„Éß„É≥ */
  .logs-section {
    max-width: 1400px;
    margin: 0 auto;
    position: relative;
    z-index: 1;
    animation: fadeInUp 0.8s ease-out 0.4s both;
    margin-top: 1rem;
  }

  .logs-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 2rem;
  }

  .logs-title {
    font-size: 1.5rem;
    font-weight: 700;
    color: white;
    margin: 0;
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
  }

  .add-btn {
    background: linear-gradient(45deg, #667eea, #764ba2);
    color: white;
    padding: 0.75rem 1.5rem;
    border-radius: 12px;
    text-decoration: none;
    font-weight: 600;
    font-size: 1rem;
    transition: all 0.3s ease;
    box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
  }

  .add-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(102, 126, 234, 0.4);
  }

  .logs-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 1rem;
  }

  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(30px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @media (max-width: 768px) {
    .dashboard-title {
      font-size: 2.5rem;
    }

    .logs-grid {
      grid-template-columns: 1fr;
      gap: 1.5rem;
    }

    .logs-header {
      flex-direction: column;
      gap: 1rem;
      align-items: flex-start;
    }
  }

  /* „Ç´„É¨„É≥„ÉÄ„Éº„Çª„ÇØ„Ç∑„Éß„É≥ */
  .calendar-section-main {
    max-width: 1400px;
    margin: 0 auto 1rem auto;
    position: relative;
    z-index: 1;
    animation: fadeInUp 0.8s ease-out 0.4s both;
    width: 100%;
    box-sizing: border-box;
  }

  .calendar-title {
    font-size: 1.5rem;
    font-weight: 700;
    color: #374151;
    margin-bottom: 1rem;
    text-align: center;
  }

  .calendar-card {
    background: rgba(255, 255, 255, 0.95);
    border-radius: 12px;
    padding: 1.5rem;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.2);
    transition: all 0.3s ease;
    overflow: hidden;
    width: 100%;
    min-width: 0;
    min-height: 200px;
    margin-right: 1rem;
  }

  @media (max-width: 480px) {
    .dashboard-container {
      padding: 1rem 0.5rem;
    }

    .dashboard-title {
      font-size: 2rem;
    }
  }
</style>
