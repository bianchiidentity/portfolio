---
import Layout from "../layouts/Layout.astro";
import ActivitySummary from "../components/dashboard/ActivitySummary.astro";
import ActivityCharts from "../components/dashboard/ActivityCharts.astro";
import Heatmap from "../components/dashboard/Heatmap.astro";
import ExerciseLog from "../components/dashboard/ExerciseLog.astro";
import BookLog from "../components/dashboard/BookLog.astro";
import OutputLog from "../components/dashboard/OutputLog.astro";

// 型定義
interface ExerciseItem {
  exercise_name: string;
  count: number;
  weight: number;
  date: string;
}

interface BookItem {
  title: string;
  pages_read: number;
  date: string;
}

interface OutputItem {
  type: string;
  chars: number;
  is_tech: boolean;
  date: string;
}

interface ExerciseStats {
  [key: string]: {
    name: string;
    totalCount: number;
    totalWeight: number;
    sessions: number;
    lastDate: string | null;
  };
}

interface BookStats {
  [key: string]: {
    title: string;
    totalPages: number;
    sessions: number;
    lastDate: string | null;
  };
}

interface OutputStats {
  [key: string]: {
    type: string;
    totalChars: number;
    sessions: number;
    techCount: number;
    lastDate: string | null;
  };
}

// 直接データベースからデータを取得
const locals = Astro.locals;
const DB = (locals as any)?.runtime?.env?.DB;

let exerciseData = [];
let bookData = [];
let outputData = [];

if (DB) {
  try {
    // 筋トレデータ
    const exerciseResult = await DB.prepare(
      "SELECT * FROM exercise ORDER BY date DESC LIMIT 50"
    ).all();
    exerciseData = exerciseResult.results || [];
    console.log("筋トレデータ:", exerciseData.length, "件");

    // 読書データ
    const bookResult = await DB.prepare(
      "SELECT * FROM book ORDER BY date DESC LIMIT 50"
    ).all();
    bookData = bookResult.results || [];
    console.log("読書データ:", bookData.length, "件");

    // アウトプットデータ
    const outputResult = await DB.prepare(
      "SELECT * FROM output ORDER BY date DESC LIMIT 50"
    ).all();
    outputData = outputResult.results || [];
    console.log("アウトプットデータ:", outputData.length, "件");
  } catch (error) {
    console.error("データベースエラー:", error);
  }
} else {
  console.log("データベース接続エラー: DBが見つかりません");
}

// 筋トレ統計の計算
const exerciseStats: ExerciseStats = {};
const exerciseMaxRecords: {
  [key: string]: { maxWeight: number; maxCount: number };
} = {};
exerciseData.forEach((item: ExerciseItem) => {
  const exerciseName = item.exercise_name;
  if (!exerciseStats[exerciseName]) {
    exerciseStats[exerciseName] = {
      name: exerciseName,
      totalCount: 0,
      totalWeight: 0,
      sessions: 0,
      lastDate: null,
    };
  }
  exerciseStats[exerciseName].totalCount += item.count;
  exerciseStats[exerciseName].totalWeight += item.weight * item.count;
  exerciseStats[exerciseName].sessions += 1;
  exerciseStats[exerciseName].lastDate = item.date;

  // 最大記録の更新
  if (!exerciseMaxRecords[exerciseName]) {
    exerciseMaxRecords[exerciseName] = { maxWeight: 0, maxCount: 0 };
  }
  if (item.weight > exerciseMaxRecords[exerciseName].maxWeight) {
    exerciseMaxRecords[exerciseName].maxWeight = item.weight;
  }
  if (item.count > exerciseMaxRecords[exerciseName].maxCount) {
    exerciseMaxRecords[exerciseName].maxCount = item.count;
  }
});

// 読書統計の計算
const bookStats: BookStats = {};
bookData.forEach((item: BookItem) => {
  const title = item.title;
  if (!bookStats[title]) {
    bookStats[title] = {
      title: title,
      totalPages: 0,
      sessions: 0,
      lastDate: null,
    };
  }
  bookStats[title].totalPages += item.pages_read;
  bookStats[title].sessions += 1;
  bookStats[title].lastDate = item.date;
});

// アウトプット統計の計算
const outputStats: OutputStats = {};
outputData.forEach((item: OutputItem) => {
  const type = item.type;
  if (!outputStats[type]) {
    outputStats[type] = {
      type: type,
      totalChars: 0,
      sessions: 0,
      techCount: 0,
      lastDate: null,
    };
  }
  outputStats[type].totalChars += item.chars;
  outputStats[type].sessions += 1;
  if (item.is_tech) {
    outputStats[type].techCount += 1;
  }
  outputStats[type].lastDate = item.date;
});
---

<Layout>
  <main
    class="min-h-screen bg-gradient-to-br from-indigo-600 to-purple-600 p-4 relative overflow-x-hidden w-full box-border"
  >
    <div
      class='absolute inset-0 bg-[url(&apos;data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grain" width="100" height="100" patternUnits="userSpaceOnUse"><circle cx="25" cy="25" r="1" fill="white" opacity="0.1"/><circle cx="75" cy="75" r="1" fill="white" opacity="0.1"/><circle cx="50" cy="10" r="0.5" fill="white" opacity="0.1"/><circle cx="10" cy="60" r="0.5" fill="white" opacity="0.1"/><circle cx="90" cy="40" r="0.5" fill="white" opacity="0.1"/></pattern></defs><rect width="100" height="100" fill="url(%23grain)"/></svg>&apos;)] pointer-events-none'
    >
    </div>

    <div class="text-center mb-6 relative z-1 w-full box-border">
      <h1
        class="text-4xl md:text-5xl font-extrabold text-white mb-1 drop-shadow-lg animate-fadeInUp"
      >
        アクティビティダッシュボード
      </h1>
      <p
        class="text-base text-white/90 font-light m-0 animate-fadeInUp animation-delay-200"
      >
        日々の活動を可視化して、継続的な成長をサポート
      </p>
    </div>

    <div
      class="grid grid-cols-1 lg:grid-cols-2 gap-4 max-w-[1400px] w-full mx-auto mb-4 relative z-1 animate-fadeInUp animation-delay-300 min-h-[60vh]"
    >
      <ActivitySummary
        exerciseData={exerciseData}
        bookData={bookData}
        outputData={outputData}
        exerciseMaxRecords={exerciseMaxRecords}
        bookStats={bookStats}
        outputStats={outputStats}
      />

      <ActivityCharts exerciseData={exerciseData} bookData={bookData} />
    </div>

    <section
      class="max-w-[1400px] mx-auto mb-4 relative z-1 animate-fadeInUp animation-delay-400 w-full box-border"
    >
      <h2 class="text-2xl font-bold text-gray-800 mb-4 text-center">
        📅 活動カレンダー
      </h2>
      <div
        class="bg-white/95 rounded-xl p-6 shadow-lg backdrop-blur-sm border border-white/20 transition-all duration-300 overflow-hidden w-full min-w-0 min-h-[200px] mr-4"
      >
        <Heatmap
          exerciseData={exerciseData}
          bookData={bookData}
          outputData={outputData}
        />
      </div>
    </section>

    <section
      class="max-w-[1400px] mx-auto relative z-1 animate-fadeInUp animation-delay-400 mt-4"
    >
      <div class="flex justify-between items-center mb-4 flex-wrap gap-4">
        <h2 class="text-2xl font-bold text-white m-0 drop-shadow-lg">
          📋 詳細ログ
        </h2>
        <a
          href="/input"
          class="bg-gradient-to-r from-indigo-600 to-purple-600 text-white px-6 py-3 rounded-xl no-underline font-semibold text-base transition-all duration-300 shadow-lg hover:-translate-y-0.5 hover:shadow-xl"
        >
          ＋ データを追加
        </a>
      </div>
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        <ExerciseLog exerciseData={exerciseData} />
        <BookLog bookData={bookData} />
        <OutputLog outputData={outputData} />
      </div>
    </section>
  </main>
</Layout>

<style>
  @layer components {
    @keyframes fadeInUp {
      from {
        opacity: 0;
        transform: translateY(30px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    .animate-fadeInUp {
      animation: fadeInUp 0.8s ease-out;
    }

    .animation-delay-200 {
      animation-delay: 0.2s;
    }

    .animation-delay-300 {
      animation-delay: 0.3s;
    }

    .animation-delay-400 {
      animation-delay: 0.4s;
    }

    @media (max-width: 768px) {
      .dashboard-title {
        font-size: 2.5rem;
      }

      .logs-grid {
        grid-template-columns: 1fr;
        gap: 1.5rem;
      }

      .logs-header {
        flex-direction: column;
        gap: 1rem;
        align-items: flex-start;
      }
    }

    @media (max-width: 480px) {
      .dashboard-container {
        padding: 1rem 0.5rem;
      }

      .dashboard-title {
        font-size: 2rem;
      }
    }
  }
</style>
