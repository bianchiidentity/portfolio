---
import Layout from "../layouts/Layout.astro";
import ActivitySummary from "../components/dashboard/ActivitySummary.astro";
import ActivityCharts from "../components/dashboard/ActivityCharts.astro";
import Heatmap from "../components/dashboard/Heatmap.astro";
import ExerciseLog from "../components/dashboard/ExerciseLog.astro";
import BookLog from "../components/dashboard/BookLog.astro";
import OutputLog from "../components/dashboard/OutputLog.astro";
import type {
  BookStats,
  OutputStats,
  ExerciseMaxRecords,
} from "../types/dashboard";

// 直接データベースからデータを取得
const locals = Astro.locals;
const DB = (locals as any)?.runtime?.env?.DB;

let exerciseData = [];
let bookData = [];
let outputData = [];
let trainingDays: number = 0;
let exerciseTotalCounts: { [key: string]: number } = {};
let exerciseMaxRecords: ExerciseMaxRecords = {};
let bookStats: BookStats = {};
let outputStats: OutputStats = {};
let bookDays = 0;
let bookTotalPages = 0;
let outputDays = 0;
let outputTotalChars = 0;
let outputArticlesCount = 0;

if (DB) {
  try {
    // 筋トレデータ（最新50件のみ表示用）
    const exerciseResult = await DB.prepare(
      "SELECT * FROM exercise ORDER BY date DESC LIMIT 50"
    ).all();
    exerciseData = exerciseResult.results || [];

    // ジムに行った日数（ユニークな日付数）
    const trainingDaysResult = await DB.prepare(
      "SELECT COUNT(DISTINCT date) AS training_days FROM exercise"
    ).first();
    trainingDays = (trainingDaysResult as any)?.training_days ?? 0;

    // 各種トレーニングの総回数（全期間）
    const totalsResult = await DB.prepare(
      "SELECT exercise_name, SUM(count) AS total_count FROM exercise GROUP BY exercise_name"
    ).all();
    (totalsResult.results || []).forEach((row: any) => {
      exerciseTotalCounts[row.exercise_name] = row.total_count ?? 0;
    });

    // 各種トレーニングの最大重量・最大回数（全期間）
    const maxResult = await DB.prepare(
      "SELECT exercise_name, MAX(weight) AS max_weight, MAX(count) AS max_count FROM exercise GROUP BY exercise_name"
    ).all();
    (maxResult.results || []).forEach((row: any) => {
      exerciseMaxRecords[row.exercise_name] = {
        maxWeight: row.max_weight ?? 0,
        maxCount: row.max_count ?? 0,
      };
    });

    // 読書ログ（表示用）
    const bookResult = await DB.prepare(
      "SELECT * FROM book ORDER BY date DESC LIMIT 50"
    ).all();
    bookData = bookResult.results || [];

    // 読書集計（全期間）
    const bookGrouped = await DB.prepare(
      "SELECT title, SUM(pages_read) AS total_pages, COUNT(*) AS sessions, MAX(date) AS last_date FROM book GROUP BY title"
    ).all();
    (bookGrouped.results || []).forEach((row: any) => {
      bookStats[row.title] = {
        title: row.title,
        totalPages: row.total_pages ?? 0,
        sessions: row.sessions ?? 0,
        lastDate: row.last_date ?? null,
      };
    });
    const bookDaysRow = await DB.prepare(
      "SELECT COUNT(DISTINCT date) AS days FROM book"
    ).first();
    bookDays = (bookDaysRow as any)?.days ?? 0;
    const bookTotalPagesRow = await DB.prepare(
      "SELECT COALESCE(SUM(pages_read), 0) AS total_pages FROM book"
    ).first();
    bookTotalPages = (bookTotalPagesRow as any)?.total_pages ?? 0;

    // アウトプットログ（表示用）
    const outputResult = await DB.prepare(
      "SELECT * FROM output ORDER BY date DESC LIMIT 50"
    ).all();
    outputData = outputResult.results || [];

    // アウトプット集計（全期間）
    const outputGrouped = await DB.prepare(
      "SELECT type, SUM(chars) AS total_chars, COUNT(*) AS sessions, SUM(CASE WHEN is_tech THEN 1 ELSE 0 END) AS tech_count, MAX(date) AS last_date FROM output GROUP BY type"
    ).all();
    (outputGrouped.results || []).forEach((row: any) => {
      outputStats[row.type] = {
        type: row.type,
        totalChars: row.total_chars ?? 0,
        sessions: row.sessions ?? 0,
        techCount: row.tech_count ?? 0,
        lastDate: row.last_date ?? null,
      };
    });
    const outputDaysRow = await DB.prepare(
      "SELECT COUNT(DISTINCT date) AS days FROM output"
    ).first();
    outputDays = (outputDaysRow as any)?.days ?? 0;
    const outputTotalCharsRow = await DB.prepare(
      "SELECT COALESCE(SUM(chars), 0) AS total_chars FROM output"
    ).first();
    outputTotalChars = (outputTotalCharsRow as any)?.total_chars ?? 0;
    const outputArticlesRow = await DB.prepare(
      "SELECT COUNT(*) AS articles FROM output"
    ).first();
    outputArticlesCount = (outputArticlesRow as any)?.articles ?? 0;
  } catch (error) {
    console.error("データベースエラー:", error);
  }
} else {
  console.error("データベース接続エラー: DBが見つかりません");
}
---

<Layout>
  <main
    class="min-h-screen bg-gradient-to-br from-indigo-600 to-purple-600 p-4 relative overflow-x-hidden w-full box-border"
  >
    <div
      class='absolute inset-0 bg-[url(&apos;data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grain" width="100" height="100" patternUnits="userSpaceOnUse"><circle cx="25" cy="25" r="1" fill="white" opacity="0.1"/><circle cx="75" cy="75" r="1" fill="white" opacity="0.1"/><circle cx="50" cy="10" r="0.5" fill="white" opacity="0.1"/><circle cx="10" cy="60" r="0.5" fill="white" opacity="0.1"/><circle cx="90" cy="40" r="0.5" fill="white" opacity="0.1"/></pattern></defs><rect width="100" height="100" fill="url(%23grain)"/></svg>&apos;)] pointer-events-none'
    >
    </div>

    <div class="text-center mb-6 relative z-1 w-full box-border">
      <h1
        class="text-4xl md:text-5xl font-extrabold text-white mb-1 drop-shadow-lg animate-fadeInUp"
      >
        アクティビティダッシュボード
      </h1>
      <p
        class="text-base text-white/90 font-light m-0 animate-fadeInUp animation-delay-200"
      >
        定量データに基づく習慣形成ダッシュボード
      </p>
    </div>

    <div
      class="grid grid-cols-1 lg:grid-cols-2 gap-4 max-w-[1400px] w-full mx-auto mb-4 relative z-1 animate-fadeInUp animation-delay-300 min-h-[60vh]"
    >
      <ActivitySummary
        exerciseMaxRecords={exerciseMaxRecords}
        bookStats={bookStats}
        trainingDays={trainingDays}
        exerciseTotalCounts={exerciseTotalCounts}
        bookDays={bookDays}
        bookTotalPages={bookTotalPages}
        outputDays={outputDays}
        outputTotalChars={outputTotalChars}
        outputArticlesCount={outputArticlesCount}
      />

      <ActivityCharts exerciseData={exerciseData} bookData={bookData} />
    </div>

    <section
      class="max-w-[1400px] mx-auto mb-4 relative z-1 animate-fadeInUp animation-delay-400 w-full box-border"
    >
      <h2 class="text-2xl font-bold text-white mb-4 text-center drop-shadow-lg">
        📅 活動カレンダー
      </h2>
      <div
        class="bg-white/95 rounded-xl p-6 shadow-lg backdrop-blur-sm border border-white/20 transition-all duration-300 overflow-hidden w-full min-w-0 min-h-[200px] mr-4"
      >
        <Heatmap
          exerciseData={exerciseData}
          bookData={bookData}
          outputData={outputData}
        />
      </div>
    </section>

    <section
      class="max-w-[1400px] mx-auto relative z-1 animate-fadeInUp animation-delay-400 mt-4"
    >
      <div class="mb-4">
        <h2 class="text-2xl font-bold text-white m-0 drop-shadow-lg">
          📋 詳細ログ
        </h2>
      </div>
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        <ExerciseLog exerciseData={exerciseData} />
        <BookLog bookData={bookData} />
        <OutputLog outputData={outputData} />
      </div>
    </section>
  </main>
</Layout>

<style>
  @layer components {
    @keyframes fadeInUp {
      from {
        opacity: 0;
        transform: translateY(30px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    .animate-fadeInUp {
      animation: fadeInUp 0.8s ease-out;
    }

    .animation-delay-200 {
      animation-delay: 0.2s;
    }

    .animation-delay-300 {
      animation-delay: 0.3s;
    }

    .animation-delay-400 {
      animation-delay: 0.4s;
    }

    @media (max-width: 768px) {
      .dashboard-title {
        font-size: 2.5rem;
      }

      .logs-grid {
        grid-template-columns: 1fr;
        gap: 1.5rem;
      }

      .logs-header {
        flex-direction: column;
        gap: 1rem;
        align-items: flex-start;
      }
    }

    @media (max-width: 480px) {
      .dashboard-container {
        padding: 1rem 0.5rem;
      }

      .dashboard-title {
        font-size: 2rem;
      }
    }
  }
</style>
