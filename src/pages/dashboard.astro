---
import Layout from "../layouts/Layout.astro";

// 直接データベースからデータを取得
const locals = Astro.locals as any;
const DB = locals?.runtime?.env?.DB;

let exercises = [];
let books = [];
let outputs = [];
let sleeps = [];

if (DB) {
  try {
    // 並行してデータを取得
    const [exerciseResult, bookResult, outputResult, sleepResult] =
      await Promise.all([
        DB.prepare("SELECT * FROM exercise ORDER BY date DESC LIMIT 30").all(),
        DB.prepare("SELECT * FROM book ORDER BY date DESC LIMIT 30").all(),
        DB.prepare("SELECT * FROM output ORDER BY date DESC LIMIT 30").all(),
        DB.prepare("SELECT * FROM sleep ORDER BY date DESC LIMIT 30").all(),
      ]);

    exercises = exerciseResult.results || [];
    books = bookResult.results || [];
    outputs = outputResult.results || [];
    sleeps = sleepResult.results || [];
  } catch (error) {
    console.error("Database error:", error);
  }
}

// 筋トレ統計の計算
const exerciseStats = exercises.reduce((acc, e) => {
  if (!acc[e.exercise_name]) {
    acc[e.exercise_name] = {
      totalCount: 0,
      maxWeight: 0,
      dates: new Set(),
    };
  }
  acc[e.exercise_name].totalCount += e.count || 0;
  acc[e.exercise_name].maxWeight = Math.max(
    acc[e.exercise_name].maxWeight,
    e.weight || 0
  );
  acc[e.exercise_name].dates.add(e.date);
  return acc;
}, {});

// 統計を配列に変換
const exerciseStatsArray = Object.entries(exerciseStats).map(
  ([name, stats]: [string, any]) => ({
    name,
    totalCount: stats.totalCount,
    maxWeight: stats.maxWeight,
    dateCount: stats.dates.size,
  })
);

// 最近のデータ（最新5件）
const recentExercises = exercises.slice(0, 5);
const recentBooks = books.slice(0, 5);
const recentOutputs = outputs.slice(0, 5);
const recentSleeps = sleeps.slice(0, 5);

// 合計統計
const totalBooks = books.length;
const totalOutputs = outputs.length;
const totalSleepHours = sleeps.reduce((sum, s) => sum + (s.hours || 0), 0);
const avgSleepHours =
  sleeps.length > 0 ? (totalSleepHours / sleeps.length).toFixed(1) : 0;
---

<Layout title="Dashboard">
  <main class="dashboard">
    <div class="container">
      <header class="dashboard-header">
        <h1>📊 ライフダッシュボード</h1>
        <p class="subtitle">日々の活動を可視化（入力フォームは非公開）</p>
      </header>

      <div class="dashboard-layout">
        <div class="main-content">
          <section class="exercise-stats">
            <h2>💪 筋トレ統計</h2>
            <div class="exercise-grid">
              {
                exerciseStatsArray.map((stat) => (
                  <div class="exercise-card">
                    <div class="exercise-icon">
                      {stat.name === "デッドリフト"
                        ? "🏋️"
                        : stat.name === "スクワット"
                          ? "🦵"
                          : stat.name === "ベンチプレス"
                            ? "💪"
                            : stat.name === "チェストプレス"
                              ? "🏋️‍♂️"
                              : stat.name === "ショルダープレス"
                                ? "🤲"
                                : stat.name === "チンニング"
                                  ? "🧗"
                                  : stat.name === "ラットプル"
                                    ? "🎯"
                                    : stat.name === "レッグプレス"
                                      ? "🦿"
                                      : stat.name === "ダンベルカール"
                                        ? "💪"
                                        : "🏋️"}
                    </div>
                    <div class="exercise-info">
                      <div class="exercise-name">{stat.name}</div>
                      <div class="exercise-stats-details">
                        <span class="stat-badge">回数: {stat.totalCount}</span>
                        <span class="stat-badge">重量: {stat.maxWeight}kg</span>
                        <span class="stat-badge">日数: {stat.dateCount}</span>
                      </div>
                    </div>
                  </div>
                ))
              }
            </div>
          </section>

          <section class="data-table">
            <h2>筋トレ記録（詳細）</h2>
            <table>
              <thead>
                <tr>
                  <th>日付</th>
                  <th>種目</th>
                  <th>回数</th>
                  <th>重量(kg)</th>
                </tr>
              </thead>
              <tbody>
                {
                  exercises.map((e) => (
                    <tr>
                      <td>{e.date}</td>
                      <td>{e.exercise_name}</td>
                      <td>{e.count}</td>
                      <td>{e.weight}</td>
                    </tr>
                  ))
                }
              </tbody>
            </table>
          </section>

          <section class="data-table">
            <h2>読書記録</h2>
            <table>
              <thead>
                <tr>
                  <th>日付</th>
                  <th>タイトル</th>
                  <th>ページ数</th>
                </tr>
              </thead>
              <tbody>
                {
                  books.map((b) => (
                    <tr>
                      <td>{b.date}</td>
                      <td>{b.title}</td>
                      <td>{b.pages_read}</td>
                    </tr>
                  ))
                }
              </tbody>
            </table>
          </section>

          <section class="data-table">
            <h2>アウトプット記録</h2>
            <table>
              <thead>
                <tr>
                  <th>日付</th>
                  <th>種類</th>
                  <th>文字数</th>
                  <th>技術系</th>
                </tr>
              </thead>
              <tbody>
                {
                  outputs.map((o) => (
                    <tr>
                      <td>{o.date}</td>
                      <td>{o.type}</td>
                      <td>{o.chars}</td>
                      <td>{o.is_tech ? "技術" : "一般"}</td>
                    </tr>
                  ))
                }
              </tbody>
            </table>
          </section>

          <section class="data-table">
            <h2>睡眠記録</h2>
            <table>
              <thead>
                <tr>
                  <th>日付</th>
                  <th>睡眠時間(時間)</th>
                </tr>
              </thead>
              <tbody>
                {
                  sleeps.map((s) => (
                    <tr>
                      <td>{s.date}</td>
                      <td>{s.hours}</td>
                    </tr>
                  ))
                }
              </tbody>
            </table>
          </section>
        </div>

        <div class="sidebar">
          <section class="stats-card">
            <h2>📊 統計サマリー</h2>
            <div class="stat-item">
              <div class="stat-icon">💪</div>
              <div class="stat-content">
                <div class="stat-value">{exercises.length}</div>
                <div class="stat-label">筋トレ記録数</div>
              </div>
            </div>
            <div class="stat-item">
              <div class="stat-icon">📚</div>
              <div class="stat-content">
                <div class="stat-value">{totalBooks}</div>
                <div class="stat-label">読んだ本</div>
              </div>
            </div>
            <div class="stat-item">
              <div class="stat-icon">✍️</div>
              <div class="stat-content">
                <div class="stat-value">{totalOutputs}</div>
                <div class="stat-label">アウトプット数</div>
              </div>
            </div>
            <div class="stat-item">
              <div class="stat-icon">😴</div>
              <div class="stat-content">
                <div class="stat-value">{avgSleepHours}</div>
                <div class="stat-label">平均睡眠時間</div>
              </div>
            </div>
          </section>

          <section class="recent-log">
            <h2>📝 最近のログ</h2>
            <div class="log-items">
              {
                recentExercises.map((e) => (
                  <div class="log-item">
                    <div class="log-date">{e.date}</div>
                    <div class="log-content">
                      <div class="log-title">💪 {e.exercise_name}</div>
                      <div class="log-details">
                        {e.count}回 × {e.weight}kg
                      </div>
                    </div>
                  </div>
                ))
              }
              {
                recentBooks.map((b) => (
                  <div class="log-item">
                    <div class="log-date">{b.date}</div>
                    <div class="log-content">
                      <div class="log-title">📚 {b.title}</div>
                      <div class="log-details">{b.pages_read}ページ</div>
                    </div>
                  </div>
                ))
              }
              {
                recentOutputs.map((o) => (
                  <div class="log-item">
                    <div class="log-date">{o.date}</div>
                    <div class="log-content">
                      <div class="log-title">✍️ {o.type}</div>
                      <div class="log-details">{o.chars}文字</div>
                    </div>
                  </div>
                ))
              }
            </div>
          </section>
        </div>
      </div>
    </div>
  </main>
</Layout>

<style>
  .dashboard {
    min-height: 100vh;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    padding: 2rem 0;
  }
  .container {
    max-width: 1400px;
    margin: 0 auto;
    padding: 0 2rem;
  }
  .dashboard-header {
    text-align: center;
    margin-bottom: 2rem;
    color: white;
  }
  .dashboard-header h1 {
    font-size: 2.5rem;
    margin-bottom: 0.5rem;
    font-weight: 700;
  }
  .subtitle {
    font-size: 1.1rem;
    opacity: 0.9;
  }
  .dashboard-layout {
    display: grid;
    grid-template-columns: 1fr 350px;
    gap: 2rem;
    align-items: start;
  }
  .main-content {
    display: flex;
    flex-direction: column;
    gap: 2rem;
  }
  .sidebar {
    display: flex;
    flex-direction: column;
    gap: 2rem;
    position: sticky;
    top: 2rem;
  }
  .data-table {
    background: white;
    border-radius: 12px;
    padding: 1.5rem;
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.08);
    overflow-x: auto;
  }
  .data-table h2 {
    margin-top: 0;
    margin-bottom: 1rem;
    color: #333;
    font-size: 1.3rem;
  }
  .exercise-stats {
    background: white;
    border-radius: 12px;
    padding: 1.5rem;
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.08);
  }
  .exercise-stats h2 {
    margin-top: 0;
    margin-bottom: 1.5rem;
    color: #333;
    font-size: 1.3rem;
  }
  .exercise-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    gap: 1rem;
  }
  .exercise-card {
    display: flex;
    align-items: center;
    gap: 1rem;
    padding: 1rem;
    background: #f8f9fa;
    border-radius: 8px;
    border-left: 4px solid #667eea;
    transition:
      transform 0.2s ease,
      box-shadow 0.2s ease;
  }
  .exercise-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }
  .exercise-icon {
    font-size: 2.5rem;
    width: 60px;
    text-align: center;
    flex-shrink: 0;
  }
  .exercise-info {
    flex: 1;
  }
  .exercise-name {
    font-weight: 600;
    color: #333;
    font-size: 1.1rem;
    margin-bottom: 0.5rem;
  }
  .exercise-stats-details {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }
  .stat-badge {
    background: #667eea;
    color: white;
    padding: 0.2rem 0.6rem;
    border-radius: 12px;
    font-size: 0.8rem;
    font-weight: 500;
  }
  table {
    width: 100%;
    border-collapse: collapse;
    font-size: 0.95rem;
  }
  th,
  td {
    padding: 0.6rem 0.8rem;
    border-bottom: 1px solid #eee;
    text-align: left;
  }
  th {
    background: #f8f9fa;
    font-weight: 600;
    color: #333;
  }
  tr:hover {
    background: #f6f8fa;
  }
  .stats-card {
    background: white;
    border-radius: 12px;
    padding: 1.5rem;
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.08);
  }
  .stats-card h2 {
    margin-top: 0;
    margin-bottom: 1.5rem;
    color: #333;
    font-size: 1.3rem;
    text-align: center;
  }
  .stat-item {
    display: flex;
    align-items: center;
    gap: 1rem;
    padding: 1rem 0;
    border-bottom: 1px solid #f0f0f0;
  }
  .stat-item:last-child {
    border-bottom: none;
  }
  .stat-icon {
    font-size: 2rem;
    width: 50px;
    text-align: center;
  }
  .stat-content {
    flex: 1;
  }
  .stat-value {
    font-size: 1.5rem;
    font-weight: 700;
    color: #333;
    line-height: 1;
  }
  .stat-label {
    font-size: 0.9rem;
    color: #666;
    margin-top: 0.2rem;
  }
  .recent-log {
    background: white;
    border-radius: 12px;
    padding: 1.5rem;
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.08);
  }
  .recent-log h2 {
    margin-top: 0;
    margin-bottom: 1.5rem;
    color: #333;
    font-size: 1.3rem;
    text-align: center;
  }
  .log-items {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }
  .log-item {
    display: flex;
    gap: 1rem;
    padding: 1rem;
    background: #f8f9fa;
    border-radius: 8px;
    border-left: 4px solid #667eea;
  }
  .log-date {
    font-size: 0.8rem;
    color: #666;
    white-space: nowrap;
    min-width: 80px;
  }
  .log-content {
    flex: 1;
  }
  .log-title {
    font-weight: 600;
    color: #333;
    margin-bottom: 0.2rem;
  }
  .log-details {
    font-size: 0.9rem;
    color: #666;
  }
  @media (max-width: 1024px) {
    .dashboard-layout {
      grid-template-columns: 1fr;
    }
    .sidebar {
      position: static;
    }
  }
</style>
