---
// 筋トレグラフコンポーネント
export type Props = {
  exerciseData: any[];
};

const { exerciseData } = Astro.props;
---

<div
  class="bg-white/95 rounded-xl p-4 shadow-lg backdrop-blur-sm border border-white/20 transition-all duration-300 hover:-translate-y-1 hover:shadow-xl overflow-hidden w-full min-w-0"
>
  <h3 class="text-lg font-bold text-gray-800 m-0 mb-4 text-center">
    筋トレ負荷スコアの推移
  </h3>
  <canvas
    id="exerciseChart"
    width="400"
    height="200"
    class="w-full h-[200px] md:h-[250px]"></canvas>
</div>

<script is:inline define:vars={{ exerciseData }}>
  // Chart.jsが読み込まれているか確認
  function initializeExerciseChart() {
    if (typeof Chart === "undefined") {
      console.log("Chart.js not loaded, retrying...");
      setTimeout(initializeExerciseChart, 1000);
      return;
    }

    const hasExerciseData = exerciseData && exerciseData.length > 0;

    // グラフの設定
    const chartOptions = {
      responsive: true,
      maintainAspectRatio: false,
      scales: {
        y: {
          beginAtZero: true,
        },
      },
      plugins: {
        legend: {
          display: true,
        },
      },
    };

    // 筋トレグラフの作成
    const exerciseCtx = document.getElementById("exerciseChart");
    if (exerciseCtx) {
      if (hasExerciseData) {
        try {
          // 日付ごとに重量を集計（TSS計算は一時的に無効）
          const dailyWeight = {};

          exerciseData.forEach((item, index) => {
            const date = item.date;
            const weight = item.weight || 0;
            const count = item.count || 0;

            // 一時的に重量のみを使用
            const totalWeight = weight * count;

            if (!dailyWeight[date]) {
              dailyWeight[date] = 0;
            }
            dailyWeight[date] += totalWeight;
          });

          // 日付順にソート
          const sortedDates = Object.keys(dailyWeight).sort();
          const weightValues = sortedDates.map((date) => dailyWeight[date]);

          const exerciseChartData = {
            labels: sortedDates.slice(-20), // 最新20日分
            datasets: [
              {
                label: "総重量 (kg)",
                data: weightValues.slice(-20),
                borderColor: "#39d353",
                backgroundColor: "rgba(57, 211, 83, 0.1)",
                tension: 0.4,
                fill: true,
              },
            ],
          };

          new Chart(exerciseCtx, {
            type: "line",
            data: exerciseChartData,
            options: {
              ...chartOptions,
              plugins: {
                ...chartOptions.plugins,
                title: {
                  display: false,
                },
              },
            },
          });
        } catch (error) {
          console.error("Error creating exercise chart:", error);
        }
      } else {
        exerciseCtx.style.display = "none";
        const exerciseCard = exerciseCtx.closest(".chart-card");
        if (exerciseCard) {
          const messageDiv = document.createElement("div");
          messageDiv.className = "text-center py-8 text-gray-600 text-lg";
          messageDiv.textContent = "データがありません";
          exerciseCard.appendChild(messageDiv);
        }
      }
    }
  }

  // DOMが読み込まれてからグラフを作成
  document.addEventListener("DOMContentLoaded", function () {
    initializeExerciseChart();
  });

  // フォールバック: DOMContentLoadedが既に発火している場合
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initializeExerciseChart);
  } else {
    initializeExerciseChart();
  }
</script>
