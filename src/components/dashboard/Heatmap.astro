---
// ヒートマップコンポーネント
export type Props = {
  exerciseData: any[];
  bookData: any[];
  outputData: any[];
};

const { exerciseData, bookData, outputData } = Astro.props;
---

<div
  class="bg-white/95 rounded-xl p-4 shadow-lg backdrop-blur-sm border border-white/20 transition-all duration-300 hover:-translate-y-1 hover:shadow-xl overflow-hidden w-full min-w-0"
>
  <div class="flex justify-between items-center mb-4">
    <span class="text-lg font-bold text-gray-800">過去1年間の活動</span>
    <div class="flex items-center gap-2 text-sm text-gray-600">
      <span>少ない</span>
      <div class="flex gap-1">
        <div class="w-3 h-3 bg-gray-200 rounded-sm"></div>
        <div class="w-3 h-3 bg-green-300 rounded-sm"></div>
        <div class="w-3 h-3 bg-green-500 rounded-sm"></div>
        <div class="w-3 h-3 bg-green-600 rounded-sm"></div>
        <div class="w-3 h-3 bg-green-800 rounded-sm"></div>
      </div>
      <span>多い</span>
    </div>
  </div>
  <div class="w-full">
    <div
      class="relative h-6 mb-2 overflow-hidden w-full flex justify-start items-center"
      id="contributionMonths"
    >
    </div>
    <div
      class="flex flex-row gap-[3px] overflow-hidden min-h-[140px] p-0 bg-transparent relative items-start w-full flex-nowrap min-w-0 justify-start"
      id="contributionGrid"
    >
    </div>
  </div>
</div>

<script is:inline define:vars={{ exerciseData, bookData, outputData }}>
  // コントリビューショングラフの作成
  function createContributionGraph() {
    const grid = document.getElementById("contributionGrid");
    const monthsContainer = document.getElementById("contributionMonths");
    if (!grid) {
      return;
    }

    // 既存のコンテンツをクリア
    grid.innerHTML = "";
    if (monthsContainer) {
      monthsContainer.innerHTML = "";
    }

    // 過去12ヶ月間の日付を生成（現在から過去へ）
    const today = new Date();
    const twelveMonthsAgo = new Date(
      today.getFullYear(),
      today.getMonth() - 12,
      today.getDate()
    );

    // 現在の日付を基準に、12ヶ月前の同じ日付から開始
    const startDate = new Date(twelveMonthsAgo);
    const endDate = new Date(today);

    // 日付を昇順でソート（過去から現在へ）
    const allDates = [];
    for (
      let d = new Date(startDate);
      d <= endDate;
      d.setDate(d.getDate() + 1)
    ) {
      allDates.push(new Date(d).toISOString().split("T")[0]);
    }

    // データを日付でグループ化（詳細な活動データ）
    const activityData = {};

    // 筋トレデータ
    exerciseData?.forEach((item) => {
      const date = item.date;
      if (!activityData[date]) {
        activityData[date] = { exercise: 0, reading: 0, output: 0 };
      }
      activityData[date].exercise += 1;
    });

    // 読書データ
    bookData?.forEach((item) => {
      const date = item.date;
      if (!activityData[date]) {
        activityData[date] = { exercise: 0, reading: 0, output: 0 };
      }
      activityData[date].reading += 1;
    });

    // アウトプットデータ
    outputData?.forEach((item) => {
      const date = item.date;
      if (!activityData[date]) {
        activityData[date] = { exercise: 0, reading: 0, output: 0 };
      }
      activityData[date].output += 1;
    });

    // 週ごとにデータを整理
    const weeks = [];
    let currentWeek = [];

    allDates.forEach((date) => {
      currentWeek.push(date);
      if (currentWeek.length === 7) {
        weeks.push(currentWeek);
        currentWeek = [];
      }
    });

    // 最後の週が7日未満の場合も追加
    if (currentWeek.length > 0) {
      weeks.push(currentWeek);
    }

    // 月のラベルを追加
    const monthLabels = [];
    let currentMonth = "";
    let currentMonthIndex = 0;

    weeks.forEach((week, weekIndex) => {
      week.forEach((date) => {
        const month = new Date(date).toLocaleDateString("ja-JP", {
          month: "short",
        });
        if (month !== currentMonth) {
          currentMonth = month;
          monthLabels.push({
            month: month,
            index: weekIndex,
          });
        }
      });
    });

    // 月のラベルを表示
    monthLabels.forEach((label) => {
      const monthElement = document.createElement("div");
      monthElement.className =
        "text-xs text-gray-500 text-center whitespace-nowrap absolute top-0 w-[76px]";
      monthElement.style.left = `${label.index * 19}px`;
      monthElement.textContent = label.month;
      monthsContainer.appendChild(monthElement);
    });

    // 週ごとにグリッドを作成
    weeks.forEach((week) => {
      const weekElement = document.createElement("div");
      weekElement.className =
        "flex flex-col gap-[1px] min-h-4 mr-[3px] items-center justify-start flex-shrink-0 box-border";

      week.forEach((date) => {
        const dayElement = document.createElement("div");
        dayElement.className =
          "w-4 h-4 rounded-sm border border-black/10 bg-gray-200 transition-all duration-200 flex-shrink-0 shadow-sm block min-w-4 min-h-4 box-border hover:scale-120 hover:z-10";

        const activity = activityData[date] || {
          exercise: 0,
          reading: 0,
          output: 0,
        };
        const totalActivity =
          activity.exercise + activity.reading + activity.output;

        // 活動レベルに基づいてクラスを設定
        if (totalActivity === 0) {
          dayElement.className += " bg-gray-200 border-gray-300";
        } else if (totalActivity === 1) {
          dayElement.className += " bg-green-300 border-green-300";
        } else if (totalActivity === 2) {
          dayElement.className += " bg-green-500 border-green-500";
        } else if (totalActivity === 3) {
          dayElement.className += " bg-green-600 border-green-600";
        } else {
          dayElement.className += " bg-green-800 border-green-800";
        }

        // ツールチップを追加
        const tooltipText = `${date}\n筋トレ: ${activity.exercise}回\n読書: ${activity.reading}回\nアウトプット: ${activity.output}回`;
        dayElement.title = tooltipText;

        weekElement.appendChild(dayElement);
      });

      grid.appendChild(weekElement);
    });
  }

  // DOMが読み込まれてからグラフを作成
  document.addEventListener("DOMContentLoaded", function () {
    createContributionGraph();
  });

  // フォールバック: DOMContentLoadedが既に発火している場合
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", createContributionGraph);
  } else {
    createContributionGraph();
  }
</script>
